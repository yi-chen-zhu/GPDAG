% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{mcmc}
\alias{mcmc}
\title{MCMC for DAG GP}
\usage{
mcmc(
  X,
  dag,
  Y,
  log_tau_prior_fun,
  tau_bound,
  nug_prior,
  sig_bound,
  nu = 3/2,
  tau = 1,
  sig = 0.1,
  n_mcmc = 4000L,
  n_burn = 2000L,
  tol = 1e-12,
  maxcgiter = 200L
)
}
\arguments{
\item{X}{arma::mat, with each row representing the coordiante of a location}

\item{dag}{arma::field\url{arma::uvec}, each entry contains the indices of its parent sets in DAG ordering}

\item{log_tau_prior_fun}{Function,log prior function for tau}

\item{tau_bound}{arma::vec, lower and upper bounds for tau}

\item{nug_prior}{arma::vec, parameters for inverse gamma prior for sigma^2}

\item{sig_bound}{arma::vec, lower and upper bounds for sigma, currently not used in the codes}

\item{nu}{double, the smoothness of the Matern process}

\item{tau}{double, initial value for rescaling parameter of the Matern process}

\item{sig}{double, initial value for the standard deviation of nugget effects}

\item{n_mcmc}{unsigned integer, number of MCMC iterations}

\item{n_burn}{unsigned integer, number of MCMC iterations that are burnt}

\item{tol}{double, the tolerance of squared l2 norm of conjugate gradient}

\item{maxcgiter}{unsigned int, the maximal number of conjugate gradient iterations}
}
\value{
Rcpp list consists results of MCMC:
tau_mcmc, the MCMC samples of tau;
sig_mcmc, the MCMC samples of sig;
sig2_mean_mcmc, the mean value of sigma squared in each MCMC iteration;
Z_mcmc, a matrix, each row contains the MCMC sample of the latent function in that iteration;
Accept_ratio, average acceptance ratio for sampling the rescaling paramter tau. Is irrelevant if not in a hierarchical Bayes framework;
L & D, the ouput of function DAG_Chol in the last MCMC iterations;
RunTime: the total real world running time of the MCMC;
CG_iters: the number of conjuate gradient iterations for each MCMC step;
CG_err: the conjugate gradient error for each MCMC step.
}
\description{
This is the advanced function to perform MCMC for DAG GP and works for generic training set and DAG structures. For implementation on grid, one can call GPgrid instead.
This functions takes the coordinates of training locations (X), the DAG (dag) and the response (Y) as input. It performs MCMC and return
the MCMC samples as output. It uses a Gibbs sampler framework, whiling calling preconditioner Conjugate gradient when sampling latent process values.
}
